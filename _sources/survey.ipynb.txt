{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Surveys\n",
    "\n",
    "Surveys consist of columns\n",
    "* `id` for the question identifier\n",
    "* `answer` for the answer of the question\n",
    "* `q` which is the text of the question presented to the user (optionl)\n",
    "* As usual, the DataFrame index is the timestamp of the answer.  It is the convention that all responses in a one single survey instance have the same timestamp, and this is used to link surveys together.\n",
    "\n",
    "The raw on-disk format is \"long\", that is, one row per answer, which is \"tidy data\".  This provides the most flexible format, but often you need to do other transformations.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>id</th>\n",
       "      <th>answer</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-07-19 20:51:32+03:00</th>\n",
       "      <td>1626717092</td>\n",
       "      <td>PHQ9_1</td>\n",
       "      <td>0</td>\n",
       "      <td>2021-07-19 20:51:32+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-19 20:51:32+03:00</th>\n",
       "      <td>1626717092</td>\n",
       "      <td>PHQ9_2</td>\n",
       "      <td>1</td>\n",
       "      <td>2021-07-19 20:51:32+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-19 20:51:32+03:00</th>\n",
       "      <td>1626717092</td>\n",
       "      <td>PHQ9_3</td>\n",
       "      <td>0</td>\n",
       "      <td>2021-07-19 20:51:32+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-19 20:51:32+03:00</th>\n",
       "      <td>1626717092</td>\n",
       "      <td>PHQ9_4</td>\n",
       "      <td>0</td>\n",
       "      <td>2021-07-19 20:51:32+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-19 20:51:32+03:00</th>\n",
       "      <td>1626717092</td>\n",
       "      <td>PHQ9_5</td>\n",
       "      <td>2</td>\n",
       "      <td>2021-07-19 20:51:32+03:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                 time      id  answer  \\\n",
       "2021-07-19 20:51:32+03:00  1626717092  PHQ9_1       0   \n",
       "2021-07-19 20:51:32+03:00  1626717092  PHQ9_2       1   \n",
       "2021-07-19 20:51:32+03:00  1626717092  PHQ9_3       0   \n",
       "2021-07-19 20:51:32+03:00  1626717092  PHQ9_4       0   \n",
       "2021-07-19 20:51:32+03:00  1626717092  PHQ9_5       2   \n",
       "\n",
       "                                           datetime  \n",
       "2021-07-19 20:51:32+03:00 2021-07-19 20:51:32+03:00  \n",
       "2021-07-19 20:51:32+03:00 2021-07-19 20:51:32+03:00  \n",
       "2021-07-19 20:51:32+03:00 2021-07-19 20:51:32+03:00  \n",
       "2021-07-19 20:51:32+03:00 2021-07-19 20:51:32+03:00  \n",
       "2021-07-19 20:51:32+03:00 2021-07-19 20:51:32+03:00  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Artificial example PHQ9 data\n",
    "import niimpy\n",
    "df = niimpy.read_csv(niimpy.sampledata.SURVEY_PHQ9, tz='Europe/Helsinki')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## \"wide\" format data: converting to one-row-per-survey\n",
    "\n",
    "One can convert the data to a wide format.  This may be good for looking at it, but most analysis can probably be done better using the long format and group-by:ing the index.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['time', 'id', 'answer', 'datetime'], dtype='object')"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>id</th>\n",
       "      <th>PHQ9_1</th>\n",
       "      <th>PHQ9_2</th>\n",
       "      <th>PHQ9_3</th>\n",
       "      <th>PHQ9_4</th>\n",
       "      <th>PHQ9_5</th>\n",
       "      <th>PHQ9_6</th>\n",
       "      <th>PHQ9_7</th>\n",
       "      <th>PHQ9_8</th>\n",
       "      <th>PHQ9_9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-07-19 20:51:32+03:00</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-20 20:50:31+03:00</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-21 20:49:07+03:00</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "id                         PHQ9_1  PHQ9_2  PHQ9_3  PHQ9_4  PHQ9_5  PHQ9_6  \\\n",
       "2021-07-19 20:51:32+03:00       0       1       0       0       2       0   \n",
       "2021-07-20 20:50:31+03:00       0       1       0       0       1       0   \n",
       "2021-07-21 20:49:07+03:00       1       2       1       0       3       1   \n",
       "\n",
       "id                         PHQ9_7  PHQ9_8  PHQ9_9  \n",
       "2021-07-19 20:51:32+03:00       1       0       0  \n",
       "2021-07-20 20:50:31+03:00       0       0       0  \n",
       "2021-07-21 20:49:07+03:00       3       0       0  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wide = df.pivot(None, 'id', values='answer')\n",
    "wide"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "editable": true
   },
   "source": [
    "## Sum of survey scores\n",
    "\n",
    "Often, you want the sum of all answers within each survey setting.  This can be done easily, assuming that:\n",
    "* All the survey questions have the same timestamp (one of our basic assumptions from above)\n",
    "* All the question `id`s have the same prefix\n",
    "\n",
    "\n",
    "`niimpy.survey.sum_survey_scores` takes a data frame with a DateTimeIndex, finds all columns matching the given `survey_prefix` (e.g. `\"PHQ9\"`), and sums those values after grouping by time.  Thus, if you give `PHQ9` as the prefix, we assume that all question IDs matching `PHQ9_*` taken at the same time are part of the same.\n",
    "\n",
    "If the input data has a `user` column, we also groupby that."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-07-19 20:51:32+03:00</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-20 20:50:31+03:00</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-07-21 20:49:07+03:00</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           score\n",
       "2021-07-19 20:51:32+03:00      4\n",
       "2021-07-20 20:50:31+03:00      2\n",
       "2021-07-21 20:49:07+03:00     11"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import niimpy.survey\n",
    "niimpy.survey.sum_survey_scores(df, 'PHQ9')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
