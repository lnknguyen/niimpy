{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Summary statistics\n",
    "\n",
    "There are many ways you may want to get an overview of your data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import niimpy\n",
    "df = niimpy.read_csv(niimpy.sampledata.SCREEN_MONTH, tz='Europe/Helsinki')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hourly data\n",
    "It is easy to get the amount of data in each hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2017-03-01  7      6\n",
       "            8     20\n",
       "            9     19\n",
       "            10    12\n",
       "            11    18\n",
       "                  ..\n",
       "2017-03-31  19     6\n",
       "            20     2\n",
       "            21    31\n",
       "            22    11\n",
       "            23     7\n",
       "Length: 380, dtype: int64"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hourly = df.groupby([df.index.date, df.index.hour]).size()\n",
    "hourly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(datetime.date(2017, 3, 1), 7) had 6 data points\n"
     ]
    }
   ],
   "source": [
    "# The index is the (day, hour) pairs and the\n",
    "# value is the number at that time\n",
    "print('%s had %d data points'%(hourly.index[0], hourly.iloc[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Occurance\n",
    "\n",
    "In niimpy, **occurance** is a way to see the completeness of data.\n",
    "\n",
    "Occurance is defined as such:\n",
    "* Divides all time into hours\n",
    "* Divides all hours into five 12-minute intervals\n",
    "* Count the number of 12-minute intervals that have data.  This is $occurrence$\n",
    "* For each hour, report $occurrence$. \"5\"is taken to mean that data is present somewhat regularly, while \"0\" means we have no data.\n",
    "\n",
    "This isn't the perfect measure, but is reasonably effective and simple to calculate.  For data which isn't continuous (like screen data we are actually using), it shows how much the sensor has been used.\n",
    "\n",
    "Column meanings: `day` is obvious, `hour` is hour of day, `occurrence` is the measure described above, `count` is total number of data points in this hour, `withdata` is which of the 12-min intervals (0-4) have data.\n",
    "\n",
    "Note that the \"uniformly present data\" is not true for all data sources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>occurrence</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-03-01 07:00:00</th>\n",
       "      <td>2017-03-01</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 08:00:00</th>\n",
       "      <td>2017-03-01</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 09:00:00</th>\n",
       "      <td>2017-03-01</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 10:00:00</th>\n",
       "      <td>2017-03-01</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01 11:00:00</th>\n",
       "      <td>2017-03-01</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            day  hour  occurrence\n",
       "2017-03-01 07:00:00  2017-03-01     7           1\n",
       "2017-03-01 08:00:00  2017-03-01     8           4\n",
       "2017-03-01 09:00:00  2017-03-01     9           1\n",
       "2017-03-01 10:00:00  2017-03-01    10           5\n",
       "2017-03-01 11:00:00  2017-03-01    11           2"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "occurrences = niimpy.util.occurrence(df.index)\n",
    "occurrences.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "occ_pivot = occurrences.pivot('hour', 'day')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'matplotlib.pyplot' has no attribute 'xticklabels'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Input \u001b[0;32mIn [6]\u001b[0m, in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m pyplot\n\u001b[1;32m      2\u001b[0m ax \u001b[38;5;241m=\u001b[39m pyplot\u001b[38;5;241m.\u001b[39mimshow(occ_pivot)\n\u001b[0;32m----> 3\u001b[0m \u001b[43mpyplot\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mxticklabels\u001b[49m(occ_pivot\u001b[38;5;241m.\u001b[39mindex)\n",
      "\u001b[0;31mAttributeError\u001b[0m: module 'matplotlib.pyplot' has no attribute 'xticklabels'"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "ax = pyplot.imshow(occ_pivot)\n",
    "pyplot.xticklabels(occ_pivot.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
