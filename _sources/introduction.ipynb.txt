{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Niimpy introduction\n",
    "\n",
    "Niimpy allows you to access Koota sqlite databases easily."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Demo\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Insert path to use the version from this repository\n",
    "import sys\n",
    "sys.path.insert(0, '..')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import niimpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "# Or to automatically reload (only needed if doing niimpy development)\n",
    "%load_ext autoreload\n",
    "%autoreload 1\n",
    "%aimport niimpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [],
   "source": [
    "data = niimpy.open(niimpy.sampledata.DATA, tz='Europe/Helsinki')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "This sample data is a single-user database - basically, it doesn't have `user` and `device` columns.  The `user` column will identify which user the data belongs to, and in a multi-user database, you can select a certain user by using a standard `user=` argument.\n",
    "\n",
    "A user can have multiple devices of the same type, and different devices are identified with the `device` column.  Currently there is no advanced support for this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "# This returns nothing, because this is a single-user database\n",
    "# Otherwise, it would return a list of all user hashes\n",
    "data.users()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'AwareScreen'}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The sample data included with niimpy only has AwareScreen data.\n",
    "# You can read about the AWARE Screen sensor here:\n",
    "#   http://www.awareframework.com/screen/\n",
    "data.tables()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "### Looking at the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "You can look at raw data (this is basically the exact columns in the database)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>screen_status</th>\n",
       "      <th>datetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-07-10 00:13:17.933000192+03:00</th>\n",
       "      <td>1.531171e+09</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-07-10 00:13:17.933000192+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-07-10 00:13:28.672000+03:00</th>\n",
       "      <td>1.531171e+09</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-07-10 00:13:28.672000+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-07-10 00:13:28.717999872+03:00</th>\n",
       "      <td>1.531171e+09</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-07-10 00:13:28.717999872+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-07-10 12:05:05.299000064+03:00</th>\n",
       "      <td>1.531214e+09</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-07-10 12:05:05.299000064+03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-07-10 12:05:09.783000064+03:00</th>\n",
       "      <td>1.531214e+09</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-07-10 12:05:09.783000064+03:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             time screen_status  \\\n",
       "2018-07-10 00:13:17.933000192+03:00  1.531171e+09             1   \n",
       "2018-07-10 00:13:28.672000+03:00     1.531171e+09             0   \n",
       "2018-07-10 00:13:28.717999872+03:00  1.531171e+09             2   \n",
       "2018-07-10 12:05:05.299000064+03:00  1.531214e+09             1   \n",
       "2018-07-10 12:05:09.783000064+03:00  1.531214e+09             0   \n",
       "\n",
       "                                                               datetime  \n",
       "2018-07-10 00:13:17.933000192+03:00 2018-07-10 00:13:17.933000192+03:00  \n",
       "2018-07-10 00:13:28.672000+03:00       2018-07-10 00:13:28.672000+03:00  \n",
       "2018-07-10 00:13:28.717999872+03:00 2018-07-10 00:13:28.717999872+03:00  \n",
       "2018-07-10 12:05:05.299000064+03:00 2018-07-10 12:05:05.299000064+03:00  \n",
       "2018-07-10 12:05:09.783000064+03:00 2018-07-10 12:05:09.783000064+03:00  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "screen = data.raw('AwareScreen', None)\n",
    "# This is a pandas DataFrame\n",
    "screen.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Get the first timestamp of the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true,
    "jupyter": {
     "outputs_hidden": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2018-07-10 00:13:17.933000192+0300', tz='Europe/Helsinki')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.first('AwareScreen', None)['datetime'][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "Let's use this chance to discuss some common column names:\n",
    "* `time` always referrs to a unixtime\n",
    "* `datetime` always referrs to a `pandas.Timestamp`\n",
    "* the dataframe index is usually pandas timestamps if appropriate - same as `datetime`."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
