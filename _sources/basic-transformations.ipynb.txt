{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic transformations\n",
    "\n",
    "This page shows some basic transformations you can do once you have read data.  Really, it is simply a pandas crash course, since pandas provides all the operations you may need and there is no need for us to re-invent things.  Pandas provides a solid but flexible base for us to build advanced operations on top of.\n",
    "\n",
    "You can read more at the [Pandas documentation](https://pandas.pydata.org/pandas-docs/stable/index.html)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extracting single rows and columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "TZ = 'Europe/Helsinki'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import niimpy\n",
    "df = niimpy.read_csv(niimpy.sampledata.MULTIUSER_AWAREBATTERY_CSV, tz=TZ)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020-01-09 02:20:02.924999936+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 02:21:30.405999872+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 02:24:12.805999872+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 02:35:38.561000192+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 02:35:38.953000192+02:00    jd9INuQ5BBlW\n",
       "                                           ...     \n",
       "2020-01-09 23:02:13.938999808+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 23:10:37.262000128+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 23:22:13.966000128+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 23:32:13.959000064+02:00    jd9INuQ5BBlW\n",
       "2020-01-09 23:39:06.800000+02:00       jd9INuQ5BBlW\n",
       "Name: user, Length: 373, dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get a single column, in this case all users\n",
    "df['user']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user                                   jd9INuQ5BBlW\n",
       "device                                 3p83yASkOb_B\n",
       "time                                 1578530592.424\n",
       "battery_level                                    76\n",
       "battery_status                                    2\n",
       "battery_health                                    2\n",
       "battery_adaptor                                   2\n",
       "datetime           2020-01-09 02:43:12.424000+02:00\n",
       "Name: 2020-01-09 02:43:12.424000+02:00, dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get a single row, in this case the 10th (note the first row is zero):\n",
    "df.iloc[10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Listing unique users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['jd9INuQ5BBlW'], dtype=object)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['user'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## List unique values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 2, 5])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['battery_status'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Extract data of only one subject"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Renaming a column or columns\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transforming a column to a new value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
